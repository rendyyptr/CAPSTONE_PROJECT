# -*- coding: utf-8 -*-
"""Untitled13.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10wtrLhdgod8Pp_1CFCRKeZ0tphfuRuLe
"""

from google.colab import files
dokumen = files.upload()

import zipfile
import tensorflow as tf
import matplotlib.pyplot as plt
import os
import matplotlib.image as mpimg
from keras.preprocessing import image
import numpy as np

data = '/content/Dataset_fix.zip'
file_ekstrak = zipfile.ZipFile(data, 'r')
file_ekstrak.extractall()
file_ekstrak.close()

direktori = '/content/Dataset_Semifix'
direktori_train = os.path.join(direktori, 'Train')
direktori_validation = os.path.join(direktori, 'Validation')
direktori_glaukoma_train = os.path.join(direktori_train, 'Glaukoma')
direktori_glaukoma_validation = os.path.join(direktori_validation, 'Glaukoma')
direktori_sehat_train = os.path.join(direktori_train, 'Sehat')
direktori_sehat_validation = os.path.join(direktori_validation, 'Sehat')
direktori_katarak_train = os.path.join(direktori_train, 'Katarak')
direktori_katarak_validation = os.path.join(direktori_validation, 'Katarak')

print('total training sehat images:', len(os.listdir(direktori_sehat_train)))
print('total training glaukoma images:', len(os.listdir(direktori_glaukoma_train)))
print('total training katarak images:', len(os.listdir(direktori_katarak_train)))

kolom = 4
baris = 3
fig = plt.gcf()
fig.set_size_inches(kolom*4, baris*4)
next_pic = 0
next_pic += 4
next_sehat = [os.path.join(direktori_glaukoma_train, gambar) for gambar in os.listdir(direktori_glaukoma_train)[next_pic-4:next_pic]]
next_glaukoma = [os.path.join(direktori_sehat_train, gambar) for gambar in os.listdir(direktori_sehat_train)[next_pic-4:next_pic]]
next_katarak = [os.path.join(direktori_katarak_train, gambar) for gambar in os.listdir(direktori_katarak_train)[next_pic-4:next_pic]]
for i, image_path in enumerate(next_sehat + next_glaukoma + next_katarak):
  size = plt.subplot(kolom, baris, i+1)
  size.axis('off')
  img = mpimg.imread(image_path)
  plt.imshow(img)
plt.show()

model = tf.keras.models.Sequential()
model.add(tf.keras.layers.Conv2D(64, (3, 3), activation='relu', input_shape=(150, 150, 3)))
model.add(tf.keras.layers.MaxPooling2D(2, 2))
model.add(tf.keras.layers.Conv2D(64, (3, 3), activation='relu'))
model.add(tf.keras.layers.MaxPooling2D(2, 2))
model.add(tf.keras.layers.Conv2D(128, (3, 3), activation='relu'))
model.add(tf.keras.layers.MaxPooling2D(2, 2))
model.add(tf.keras.layers.Conv2D(128, (3, 3), activation='relu'))
model.add(tf.keras.layers.MaxPooling2D(2, 2))
model.add(tf.keras.layers.Flatten())
model.add(tf.keras.layers.Dense(128, activation='relu'))
model.add(tf.keras.layers.Dense(3, activation='softmax'))
model.summary()

from tensorflow.keras.preprocessing.image import ImageDataGenerator
#Normalisasi Data
train_data_generator = ImageDataGenerator(rescale=1.0/255.0,
                                          rotation_range=20,
                                          width_shift_range=0.2,
                                          height_shift_range=0.2,
                                          shear_range=0.2,
                                          zoom_range=0.2,
                                          horizontal_flip=True,
                                          fill_mode='nearest')
test_data_generator = ImageDataGenerator(rescale=1.0/255.0)

train_generator = train_data_generator.flow_from_directory(direktori_train,
                                                           batch_size=10,
                                                           class_mode='categorical',
                                                           target_size=(150,150))

test_generator = test_data_generator.flow_from_directory(direktori_validation,
                                                         batch_size=10,
                                                         class_mode='categorical',
                                                         target_size=(150,150))

model.compile(optimizer=tf.keras.optimizers.Adam(), loss='categorical_crossentropy', metrics=['accuracy'])

history = model.fit(
            train_generator,
            steps_per_epoch=30,
            epochs=100,
            validation_data=test_generator,
            validation_steps=10,
            verbose=2
            )

def buat_grafik(history, string):
  plt.plot(history.history[string])
  plt.xlabel('Epochs')
  plt.ylabel(string)
  plt.show()
buat_grafik(history, 'accuracy')
buat_grafik(history, 'val_accuracy')

from google.colab import files
unggahan = files.upload()

for i in unggahan.keys():
  path = '/content/' + i
  gmbr = image.load_img(path, target_size=(150,150))

  x=image.img_to_array(gmbr)
  x = x / 255
  x=np.expand_dims(x,axis=0)
  gambar = np.vstack([x])

  kelas = model.predict(gambar,batch_size=50)
  print(kelas)
  predicted = np.argmax(kelas)
  print(predicted)

#tf.keras.models.save_model(model, filepath='/content/1',format='h5')
model_name = 'Blood_Sugar_Classification.h5'
model.save(model_name, save_format='h5')